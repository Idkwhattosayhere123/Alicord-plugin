import com.aliucord.annotations.AliucordPlugin;
import com.aliucord.entities.Plugin;
import com.aliucord.utils.ReflectUtils;
import com.discord.widgets.chat.input.WidgetChatInput;
import com.discord.widgets.chat.list.WidgetChatList;

import java.lang.reflect.Field;
import java.util.Objects;

import rx.Subscription;

@AliucordPlugin
public class MessageEditorPlugin extends Plugin {
    private static final Field chatInputField = ReflectUtils.getField(WidgetChatList.class, "this$0");
    private static final Field chatListField = ReflectUtils.getField(WidgetChatInput.class, "this$0");

    @Override
    public void start(Context context) throws Throwable {
        super.start(context);
        patchSendMessage();
    }

    @Override
    public void stop(Context context) throws Throwable {
        super.stop(context);
        unpatchSendMessage();
    }

    private void patchSendMessage() {
        try {
            chatInputField.setAccessible(true);
            chatListField.setAccessible(true);
            WidgetChatList chatList = (WidgetChatList) chatListField.get(null);
            WidgetChatInput chatInput = (WidgetChatInput) chatInputField.get(chatList);

            Subscription subscription = chatList.getAdapter().messages.subscribe(message -> {
                message.setMessage(message.getMessage().withEditable(true));
            });

            addSubscription(subscription);
        } catch (Throwable e) {
            e.printStackTrace();
        }
    }

    private void unpatchSendMessage() {
        try {
            chatInputField.setAccessible(true);
            chatListField.setAccessible(true);
            WidgetChatList chatList = (WidgetChatList) chatListField.get(null);
            WidgetChatInput chatInput = (WidgetChatInput) chatInputField.get(chatList);

            for (Subscription subscription : getSubscriptions()) {
                subscription.unsubscribe();
            }
        } catch (Throwable e) {
            e.printStackTrace();
        }
    }
}
